
world_animal=['ANACONDA', 'PLATIPUS', 'RED PANDA', 'BEARE', 'KILLER WHALE', 'PLATIPUS', 'CAMELS', 'POLAR BEAR', 'KING PERGVIN', 'SNOW LEAPORD', 'ZEBRA', 'PLAINS BISON' ]

WORLD_BIOMES=['TROPICAL RAINFOREST', 'TEMPERATE FOREST', 'TAIGA', 'MARINE', 'FRESHWATER', 'DESERT', 'ARCTIC TUNDRA', 'ANTARTICA TUNCHA', 'ALPINE TUNDRA', 'TROPICAL GRASSLAND', 'TEMPEARTE GRASSLAND']


k =len(world_animal)
l=len(WORLD_BIOMES)

print(f"Q1.The lengths are {k},{l}")

m=world_animal.count('PLATIPUS')
j=WORLD_BIOMES.count('TAIGA')

print("Q2")
print(m,j)


merge_array=[]
merge_array=world_animal+WORLD_BIOMES
print("Q3")
print(merge_array)

a=world_animal.index('SNOW LEAPORD')
print("Q4")
print(a)

print("Q5")
try:
    if world_animal.index('ANACOND')>-1:
        print('true')
except ValueError:
    print('false')

reverse_arrary=world_animal[::-1]
print("Q6")
print(reverse_arrary)

alternate_list = [item for pair in zip(world_animal, WORLD_BIOMES) for item in pair]
print("Q7")
print(alternate_list);

# 8. Insert an item at a given position
world_animal.insert(3, 'Elephant')
print("Updated world_animals list after insertion:", world_animal)

# 9. Remove alternate items from a list
filtered_animals = world_animal[::2]
filtered_biomes = WORLD_BIOMES[::2]
print("World animals with alternate elements removed:", filtered_animals)
print("World biomes with alternate elements removed:", filtered_biomes)

# 10. Combine two lists, but list two items in reverse order
combined_reversed = world_animal + WORLD_BIOMES[::-1]
print("Combined list with world_biomes reversed:", combined_reversed)

# 11. Try out the inbuilt functions
print("Min of world_animals:", min(world_animal))
print("Max of world_animals:", max(world_animal))
print("Sum (not applicable for string lists)")
print("Length of world_animals:", len(world_animal))

world_animal.reverse()
print("Reversed world_animals:", world_animal)

world_animal.sort()
print("Sorted world_animals:", world_animal)

world_animal.extend(WORLD_BIOMES)
print("Extended world_animals:", world_animal)

world_animal.insert(2, "Lion")
print("After inserting 'Lion' at index 2:", world_animal)

world_animal.append("Tiger")
print("After appending 'Tiger':", world_animal)

world_animal.clear()
print("After clearing world_animals:", world_animal)

world_animals = ['Anaconda', 'Platypus', 'Red panda']  # Reset list for demonstration
del world_animals[1:3]
print("After deleting items from index 1 to 2:", world_animals)

world_animals.remove('Anaconda')
print("After removing 'Anaconda':", world_animals)

world_animals = ['Anaconda', 'Platypus', 'Red panda']
popped_item = world_animals.pop()
print("Popped item:", popped_item)
print("List after pop:", world_animals)



# Example list
numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# Basic slicing
print("Original list:", numbers)
print("Slicing from index 2 to 5:", numbers[2:6])  # elements from index 2 to 5
print("Slicing with step 2:", numbers[::2])  # every second element
print("Slicing in reverse:", numbers[::-1])  # reverse the list
print("Slicing from index 3 to end:", numbers[3:])  # from index 3 to end
print("Slicing from start to index 4:", numbers[:5])  # from start to index 4
print("Negative slicing (-5 to -2):", numbers[-5:-2])  # slicing using negative indices


# Initializing a nested list (student name and scores)
students = [
    ["Aman", [85, 90, 78]],
    ["Sharma", [88, 76, 92]],
    ["Mohan", [80, 85, 88]]
]

# 1. Adding an element to a nested list (Adding a new student)
new_student = ["Rohan", [75, 80, 70]]
students.append(new_student)
print("After adding a new student:", students)

# 2. Deleting an element in a nested list (Removing a student)
students.remove(["Sharma", [88, 76, 92]])
print("After removing Sharma:", students)

# 3. Reversing the nested list (Reverse student order)
students.reverse()
print("Reversed student list:", students)

# 4. Using loop structures in nested list (Printing all students and scores)
print("Students and scores:")
for student in students:
    print(f"Name: {student[0]}, Scores: {student[1]}")

# 5. Traversing the list using range() and enumerate()
print("Traversing using range:")
for i in range(len(students)):
    print(f"Student {i + 1}: {students[i][0]}, Scores: {students[i][1]}")

print("Traversing using enumerate:")
for index, student in enumerate(students, start=1):
    print(f"Student {index}: {student[0]}, Scores: {student[1]}")


Set 2



# (a) Create a tuple of favourite colors
colors = ('red', 'blue', 'green')
print(colors)

# (b) Tuple with different data types
data = ('John', 28, 5.9, True)
print(data)

# (c) Convert tuple to string
tuple_to_convert = ('Python', 'is', 'fun')
result = ' '.join(tuple_to_convert)
print(result)

# (d) Find repeated items in a tuple
tuple_data = (1, 2, 3, 4, 2, 5, 6, 2)
print(f"Repeated item: {tuple_data.count(2)} times")

# (e) Check if element exists in a tuple
element = 3
print(element in tuple_data)

# (f) Check if all items in the tuple are identical
tuple_data = (5, 5, 5, 5)
print(all(x == tuple_data[0] for x in tuple_data))

# (g) Swap two tuples
tuple1, tuple2 = (1, 2, 3), (4, 5, 6)
tuple1, tuple2 = tuple2, tuple1
print(tuple1, tuple2)

# (h) Copy particular element from one tuple to another
tuple1, tuple2 = (1, 2, 3), (4, 5, 6)
new_tuple = tuple1 + (tuple2[1],)
print(new_tuple)

# (i) Reverse a tuple
tuple_data = (1, 2, 3, 4)
reversed_tuple = tuple_data[::-1]
print(reversed_tuple)

# (j) Looping operation
for item in tuple_data:
    print(item)

# (k) Nested operation
nested_tuple = ((1, 2), (3, 4), (5, 6))
for a, b in nested_tuple:
    print(f"{a} - {b}")

# (l) Sort operation
sorted_tuple = tuple(sorted(tuple_data))
print(sorted_tuple)

# (m) Enumerate, min, max, sum
print(list(enumerate(tuple_data)))
print(min(tuple_data))
print(max(tuple_data))
print(sum(tuple_data))

# (n) Indexing and slicing
print(tuple_data[0])
print(tuple_data[1:3])


# Given sets
integer_set = {21, 12, 22, 33, 65, 6983}
magic_numbers = {2, 8, 20, 28, 150, 82, 126, 23}

# (a) Remove common elements
result_set = integer_set - magic_numbers
print(result_set)

# (b) Union, intersection, difference, equivalence, superset, subset
print(integer_set.union(magic_numbers))         # Union
print(integer_set.intersection(magic_numbers))  # Intersection
print(integer_set.difference(magic_numbers))    # Difference
print(integer_set == magic_numbers)             # Equivalence
print(integer_set.issuperset(magic_numbers))    # Superset
print(integer_set.issubset(magic_numbers))      # Subset


# (a) Create a dictionary
my_dict = {'name': 'John', 'age': 28, 'city': 'New York'}
print(my_dict)

# (b) Dictionary of tuples
tuple_dict = {'colors': ('red', 'green', 'blue')}
print(tuple_dict)

# (c) Member operation
print('name' in my_dict)
print('gender' not in my_dict)

# (d) Add element to the dictionary
my_dict['gender'] = 'Male'
print(my_dict)

# (e) Remove elements from the dictionary
my_dict.pop('age')
print(my_dict)

# (f) Copying elements from one dictionary to another
new_dict = my_dict.copy()
print(new_dict)

# (g) Nested dictionary
nested_dict = {
    'person': {'name': 'John', 'age': 28},
    'address': {'city': 'New York', 'zip': 10001}
}
print(nested_dict)

# (h) Loop over a dictionary
for key, value in my_dict.items():
    print(f"{key}: {value}")











Set 3






# 1. Check if all words are uppercase
def check_uppercase(sentence):
    words = sentence.split()
    all_upper = all(word.isupper() for word in words)
    return all_upper
sentence = "HELLO WORLD PYTHON"
print(check_uppercase(sentence))

# 2. String Operations
# (a) Capitalize and lowercase alternately
def capitalize_lowercase_alternate(text):
    return ''.join(char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(text))
text = "pythonprogramming"
print(capitalize_lowercase_alternate(text))

# (b) Reverse string
text = "Python"
print(text[::-1])

# (c) Concatenate two strings
s1, s2 = "Hello", "World"
print(s1 + s2)
print("%s %s" % (s1, s2))
print(f"{s1} {s2}")
print(' '.join([s1, s2]))

# (d) Member operation
s = "Python"
print('P' in s)
print('Z' not in s)

# (e) Slicing operation
s = "Python"
print(s[0:3], s[-3:], s[::2])

# 3. String Methods
# (a) isdigit()
print("123".isdigit())

# (b) isalpha()
print("Python".isalpha())

# (c) islower()
print("python".islower())

# (d) isupper()
print("PYTHON".isupper())

# (e) title()
print("python programming".title())

# (f) swapcase()
print("PyThOn".swapcase())

# (g) casefold()
print("PYTHON".casefold())

# (h) index()
print("Python Programming".index('o'))

# (i) find()
print("Python Programming".find('o'))

# (j) strip()
print("  Python  ".strip())

# (k) rstrip()
print("Python  ".rstrip())

# (l) join()
print(' '.join(['Python', 'is', 'fun']))

# (m) min()
print(min("python"))

# (n) max()
print(max("python"))

# (o) re.findall()
import re
print(re.findall(r"[a-z]+", "Python is fun"))

# (p) re.fullmatch()
print(bool(re.fullmatch(r"[A-Za-z]+", "Python")))

# (q) re.split()
print(re.split(r",", "Python,is,fun"))

# 4. String Traversal using for loop and range
s = "Python"
for i in range(len(s)):
    print(s[i])
