class OrderNode {
    orderID: number;
    next: OrderNode | null = null;

    constructor(orderID: number) {
        this.orderID = orderID;
    }
}

class OrderQueue {
    private head: OrderNode | null = null;
    private tail: OrderNode | null = null;

    // Add a new order to the queue
    addOrder(orderID: number): void {
        const newNode = new OrderNode(orderID);
        if (!this.tail) {
            this.head = this.tail = newNode;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
        console.log(`Order ${orderID} has been added.`);
    }

    // Process the first order in the queue
    processOrder(): void {
        if (!this.head) {
            console.log("No pending orders.");
            return;
        }
        const processedOrder = this.head.orderID;
        this.head = this.head.next;
        if (!this.head) {
            this.tail = null;
        }
        console.log(`Order ${processedOrder} has been processed.`);
    }

    // Display all pending orders
    showOrders(): void {
        if (!this.head) {
            console.log("No pending orders.");
            return;
        }
        let current: OrderNode | null = this.head;
        const orders: number[] = [];
        while (current) {
            orders.push(current.orderID);
            current = current.next;
        }
        console.log("Pending orders:", orders);
    }
}

// Example usage
const orderQueue = new OrderQueue();
orderQueue.addOrder(101);
orderQueue.addOrder(102);
orderQueue.addOrder(103);
orderQueue.showOrders();
orderQueue.processOrder(); // Process 101
orderQueue.showOrders();
orderQueue.processOrder(); // Process 102
orderQueue.processOrder(); // Process 103
orderQueue.processOrder(); // No pending orders
