const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

// Port on which to run the server
const PORT = 3000;

// MIME types for different file extensions
const MIME_TYPES = {
    '.html': 'text/html',
    '.css': 'text/css',
    '.js': 'text/javascript',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon'
};

// Default file to serve if a directory is requested
const DEFAULT_FILE = 'index.html';

// Create HTTP server
const server = http.createServer((req, res) => {
    console.log(`${req.method} ${req.url}`);
    
    // Parse the URL
    const parsedUrl = url.parse(req.url);
    
    // Sanitize the path to prevent directory traversal attacks
    let sanitizedPath = path.normalize(parsedUrl.pathname).replace(/^(\.\.[\/\\])+/, '');
    
    // Convert URL path to a file system path (relative to the 'public' directory)
    let filePath = path.join('public', sanitizedPath);
    
    // If the path ends with '/', append the default file
    if (filePath.endsWith('/') || filePath.endsWith('\\')) {
        filePath = path.join(filePath, DEFAULT_FILE);
    }
    
    // Get the file extension
    const ext = path.extname(filePath).toLowerCase();
    
    // Check if the file exists
    fs.stat(filePath, (err, stats) => {
        if (err) {
            if (err.code === 'ENOENT') {
                // File not found
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('404 Not Found');
            } else {
                // Server error
                res.writeHead(500, { 'Content-Type': 'text/plain' });
                res.end('500 Internal Server Error');
            }
            return;
        }
        
        // If it's a directory, redirect to append a trailing slash
        if (stats.isDirectory()) {
            res.writeHead(302, { 'Location': parsedUrl.pathname + '/' });
            res.end();
            return;
        }
        
        // Read and serve the file
        fs.readFile(filePath, (err, data) => {
            if (err) {
                res.writeHead(500, { 'Content-Type': 'text/plain' });
                res.end('500 Internal Server Error');
                return;
            }
            
            // Determine the content type
            const contentType = MIME_TYPES[ext] || 'application/octet-stream';
            
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(data);
        });
    });
});

// Start the server
server.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
    console.log(`Serving files from: ${path.resolve('public')}`);
});
