const os = require('os');

// Function to format bytes into a human-readable format
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// Function to format time in a readable format
function formatUptime(seconds) {
    const days = Math.floor(seconds / (3600 * 24));
    const hours = Math.floor((seconds % (3600 * 24)) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    
    return `${days} days, ${hours} hours, ${minutes} minutes, ${secs} seconds`;
}

// CPU information
const cpus = os.cpus();
console.log('=== CPU Information ===');
console.log(`CPU Model: ${cpus[0].model}`);
console.log(`Number of Cores: ${cpus.length}`);
console.log(`CPU Speed: ${cpus[0].speed} MHz`);

// Memory information
console.log('\n=== Memory Information ===');
console.log(`Total Memory: ${formatBytes(os.totalmem())}`);
console.log(`Free Memory: ${formatBytes(os.freemem())}`);
console.log(`Used Memory: ${formatBytes(os.totalmem() - os.freemem())}`);
console.log(`Memory Usage: ${((os.totalmem() - os.freemem()) / os.totalmem() * 100).toFixed(2)}%`);

// System information
console.log('\n=== System Information ===');
console.log(`Platform: ${os.platform()}`);
console.log(`OS Type: ${os.type()}`);
console.log(`OS Release: ${os.release()}`);
console.log(`OS Version: ${os.version()}`);
console.log(`Architecture: ${os.arch()}`);
console.log(`Hostname: ${os.hostname()}`);

// Network interfaces
console.log('\n=== Network Interfaces ===');
const networkInterfaces = os.networkInterfaces();
for (const [name, interfaces] of Object.entries(networkInterfaces)) {
    console.log(`Interface: ${name}`);
    interfaces.forEach((iface, index) => {
        console.log(`  Address ${index + 1}: ${iface.address}`);
        console.log(`  Netmask: ${iface.netmask}`);
        console.log(`  Family: IPv${iface.family}`);
        console.log(`  MAC: ${iface.mac}`);
        console.log(`  Internal: ${iface.internal}`);
        console.log('  ---');
    });
}

// Uptime
console.log('\n=== System Uptime ===');
console.log(`System Uptime: ${formatUptime(os.uptime())}`);

// User information
console.log('\n=== User Information ===');
console.log(`Username: ${os.userInfo().username}`);
console.log(`Home Directory: ${os.userInfo().homedir}`);
console.log(`Shell: ${os.userInfo().shell}`);

// Load averages (not available on Windows)
if (os.platform() !== 'win32') {
    console.log('\n=== Load Averages ===');
    const loadAvg = os.loadavg();
    console.log(`1 minute: ${loadAvg[0].toFixed(2)}`);
    console.log(`5 minutes: ${loadAvg[1].toFixed(2)}`);
    console.log(`15 minutes: ${loadAvg[2].toFixed(2)}`);
}
