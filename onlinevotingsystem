class VotingSystem {
    private votes: Map<string, number> = new Map();

    // Cast a vote for a candidate
    castVote(candidate: string): void {
        if (this.votes.has(candidate)) {
            this.votes.set(candidate, this.votes.get(candidate)! + 1);
        } else {
            this.votes.set(candidate, 1);
        }
        console.log(`Vote cast for ${candidate}`);
    }

    // Determine the winner(s)
    determineWinner(): void {
        if (this.votes.size === 0) {
            console.log("No votes cast.");
            return;
        }

        let maxVotes = 0;
        let winners: string[] = [];

        for (const [candidate, voteCount] of this.votes.entries()) {
            if (voteCount > maxVotes) {
                maxVotes = voteCount;
                winners = [candidate];
            } else if (voteCount === maxVotes) {
                winners.push(candidate);
            }
        }

        if (winners.length === 1) {
            console.log(`Winner: ${winners[0]} with ${maxVotes} votes.`);
        } else {
            console.log(`It's a tie between: ${winners.join(", ")} with ${maxVotes} votes each.`);
        }
    }
}

// Example Usage
const voting = new VotingSystem();
voting.castVote("Aman");
voting.castVote("Kumar");
voting.castVote("sharma");
voting.castVote("Aman");
voting.castVote("Aman");
voting.castVote("Kumar");

voting.determineWinner();
